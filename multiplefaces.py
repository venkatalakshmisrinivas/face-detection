# -*- coding: utf-8 -*-
"""multiplefaces.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bg9wZy2E-zpoollkmGX5mwr2JsIkkigb
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import cv2 
import matplotlib.pyplot as plt
# %matplotlib inline

image1 = cv2.imread('test.jpg')
image_gray = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
plt.imshow(image_gray, cmap='gray')

def convertToRGB(image):
  return cv2.cvtColor(image,cv2.COLOR_BGR2RGB)

haar_cascade=cv2.CascadeClassifier('face_detector.xml')

faces_rects = haar_cascade.detectMultiScale(image_gray, scaleFactor = 1.2, minNeighbors = 5);

for (x,y,w,h) in faces_rects:
     cv2.rectangle(image1,(x, y),(x+w, y+h),(255, 0, 0), 2)

plt.imshow(convertToRGB(image1))

def detect_faces(cascade, image1, scaleFactor = 1.1):
    # create a copy of the image to prevent any changes to the original one.
    image_copy = image1.copy()
    
    #convert the test image to gray scale as opencv face detector expects gray images
    gray_image = cv2.cvtColor(image_copy, cv2.COLOR_BGR2GRAY)
    
    # Applying the haar classifier to detect faces
    faces_rect = cascade.detectMultiScale(gray_image, scaleFactor=scaleFactor, minNeighbors=5)
    
    for (x, y, w, h) in faces_rect:
        cv2.rectangle(image_copy, (x, y), (x+w, y+h), (0, 255, 0), 2)
        
    return image_copy

test_image2 = cv2.imread('group.jpg')
faces=detect_faces(haar_cascade,test_image2)
#convert to RGB and display image
plt.imshow(convertToRGB(faces))

test_image2 = cv2.imread('pic.jpg')
faces=detect_faces(haar_cascade,test_image2)
#convert to RGB and display image
plt.imshow(convertToRGB(faces))